<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <UsingTask TaskName="Xamarin.AndroidX.Migration.BuildTasks.CecilfyFiles"
               AssemblyFile="$(MSBuildThisFileDirectory)Xamarin.AndroidX.Migration.BuildTasks.dll" />
    <UsingTask TaskName="Xamarin.AndroidX.Migration.BuildTasks.JetifyFiles"
               AssemblyFile="$(MSBuildThisFileDirectory)Xamarin.AndroidX.Migration.BuildTasks.dll" />
    <UsingTask TaskName="Xamarin.AndroidX.Migration.BuildTasks.ValidateAndroidXPackages"
               AssemblyFile="$(MSBuildThisFileDirectory)Xamarin.AndroidX.Migration.BuildTasks.dll" />
    <UsingTask TaskName="Xamarin.AndroidX.Migration.BuildTasks.ResolveEmbeddedFiles"
               AssemblyFile="$(MSBuildThisFileDirectory)Xamarin.AndroidX.Migration.BuildTasks.dll" />
    <!--
    <UsingTask TaskName="Xamarin.AndroidX.Migration.BuildTasks.RemoveSkippedEmbeddedFiles"
               AssemblyFile="$(MSBuildThisFileDirectory)Xamarin.AndroidX.Migration.BuildTasks.dll" />
    <UsingTask TaskName="Xamarin.AndroidX.Migration.BuildTasks.CollectAllFiles"
               AssemblyFile="$(MSBuildThisFileDirectory)Xamarin.AndroidX.Migration.BuildTasks.dll" />
    -->

    <!-- public properties -->
    <PropertyGroup>
        <!-- a flag to control whether or not to entirely disable migration -->
        <AndroidXSkipMigration Condition="'$(AndroidXSkipMigration)' == ''">false</AndroidXSkipMigration>

        <!-- a flag for checking the installed packages -->
        <AndroidXSkipValidateInstalledPackages Condition="'$(AndroidXSkipValidateInstalledPackages)' == ''">false</AndroidXSkipValidateInstalledPackages>
        <AndroidXPackageValidationUseWarnings Condition="'$(AndroidXPackageValidationUseWarnings)' == ''">false</AndroidXPackageValidationUseWarnings>

        <!-- a flag for checking the Xamarin.Android version -->
        <AndroidXSkipValidateXamarinAndroid Condition="'$(AndroidXSkipValidateXamarinAndroid)' == ''">false</AndroidXSkipValidateXamarinAndroid>
        <AndroidXXamarinAndroidValidationUseWarnings Condition="'$(AndroidXXamarinAndroidValidationUseWarnings)' == ''">false</AndroidXXamarinAndroidValidationUseWarnings>

        <!-- always use portable pdb so we can cecilfy and not cause issues -->
        <AndroidXAlwaysUsePortablePdb Condition="'$(AndroidXAlwaysUsePortablePdb)' == ''">true</AndroidXAlwaysUsePortablePdb>
        <DebugType Condition="'$(AndroidXAlwaysUsePortablePdb)' == 'true'">portable</DebugType>
    </PropertyGroup>

    <!-- "private" properties -->
    <PropertyGroup>
        <_AndroidXShouldRunMigration Condition="'$(_AndroidXShouldRunMigration)' == '' and '$(AndroidApplication)' == 'true' and '$(AndroidXIsUsingAndroidXLibraries)' == 'true' and '$(AndroidXSkipMigration)' != 'true'">true</_AndroidXShouldRunMigration>
        <_AndroidXIntermediateOutputPath>$(IntermediateOutputPath)androidx\</_AndroidXIntermediateOutputPath>
        <_AndroidXProguardIntermediateOutputPath>$(_AndroidXIntermediateOutputPath)proguard\</_AndroidXProguardIntermediateOutputPath>
        <_AndroidXJavaLibraryIntermediateOutputPath>$(_AndroidXIntermediateOutputPath)jl\</_AndroidXJavaLibraryIntermediateOutputPath>
        <_AndroidXUseVerboseToolOutput Condition="'$(_AndroidXUseVerboseToolOutput)' == ''">false</_AndroidXUseVerboseToolOutput>
        <_AndroidXParallelJetifier Condition="'$(_AndroidXParallelJetifier)' == ''">true</_AndroidXParallelJetifier>

        <!-- Skip the Android.Support checks if we aren't using Android Support -->
        <XamarinAndroidSupportSkipVerifyVersions Condition="'$(XamarinAndroidSupportSkipVerifyVersions)' == '' and '$(_AndroidXShouldRunMigration)' == 'true'">true</XamarinAndroidSupportSkipVerifyVersions>
    </PropertyGroup>

    <!-- we want to ignore everything for the Android Support Java bits -->
    <ItemDefinitionGroup Condition="'$(_AndroidXShouldRunMigration)' == 'true'">
        <_AndroidXSupportAssemblyToSkip>
            <AndroidSkipResourceExtraction>true</AndroidSkipResourceExtraction>
            <AndroidSkipJavaStubGeneration>true</AndroidSkipJavaStubGeneration>
            <AndroidSkipAddToPackage>true</AndroidSkipAddToPackage>
            <AndroidSkipResourceProcessing>true</AndroidSkipResourceProcessing>
            <AndroidXSkipAndroidXMigration>true</AndroidXSkipAndroidXMigration>
        </_AndroidXSupportAssemblyToSkip>
        <_AndroidXAssemblyToSkip>
            <AndroidSkipResourceProcessing>true</AndroidSkipResourceProcessing>
            <AndroidXSkipAndroidXMigration>true</AndroidXSkipAndroidXMigration>
        </_AndroidXAssemblyToSkip>
    </ItemDefinitionGroup>

    <!-- add all the items to ignore -->
    <ItemGroup Condition="'$(_AndroidXShouldRunMigration)' == 'true'">
        <_AndroidXSupportAssemblyToSkip Include="@(_AndroidXSupportAssembly)" />
        <_AndroidXAssemblyToSkip Include="@(_AndroidXAssembly)" />
        <_AndroidXMavenArtifactToSkip Include="@(_AndroidXMavenArtifact)" />
    </ItemGroup>

    <!-- let the build system append all the metadata to the assemblies -->
    <ItemGroup Condition="'$(_AndroidXShouldRunMigration)' == 'true'">
        <AndroidCustomMetaDataForReferences Include="@(_AndroidXSupportAssemblyToSkip)" />
        <AndroidCustomMetaDataForReferences Include="@(_AndroidXAssemblyToSkip)" />
    </ItemGroup>

    <!--
    ***************************************************************************
    * RESOLVE JAVA PATH
    * This target will make sure that the path to java.exe has been resolved.
    ***************************************************************************
    -->
    <Target Name="_AndroidXResolveJavaPath"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'">

        <PropertyGroup>
            <_AndroidXJavaPath Condition="'$(_AndroidXJavaPath)' == '' and '$(OS)' == 'Unix'">$(JavaSdkDirectory)\bin\java</_AndroidXJavaPath>
            <_AndroidXJavaPath Condition="'$(_AndroidXJavaPath)' == '' and '$(OS)' != 'Unix'">$(JavaSdkDirectory)\bin\java.exe</_AndroidXJavaPath>
        </PropertyGroup>

    </Target>

    <!--
    ***************************************************************************
    * VALIDATE XAMARIN.ANDROID VERSION
    * This target will make sure that the correct version of Xamarin.Android
    * is being used.
    ***************************************************************************
    -->
    <Target Name="_AndroidXValidateXamarinAndroid"
            BeforeTargets="BeforeBuild"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true' and '$(AndroidXSkipValidateXamarinAndroid)' != 'true'">

        <PropertyGroup>
            <_AndroidXMinimumXamarinAndroidVersion>9.4.0</_AndroidXMinimumXamarinAndroidVersion>
            <_AndroidXXamarinAndroidVersion>$(XamarinAndroidVersion.Split('-')[0])</_AndroidXXamarinAndroidVersion>
            <_AndroidXXamarinAndroidVersionIsValid Condition="$([System.Version]::Parse($(_AndroidXXamarinAndroidVersion))) &gt;= $([System.Version]::Parse($(_AndroidXMinimumXamarinAndroidVersion)))">true</_AndroidXXamarinAndroidVersionIsValid>
            <_AndroidXXamarinAndroidVersionMessage>Android X migration requires a minimum Xamarin.Android version of $(_AndroidXMinimumXamarinAndroidVersion). Your version is $(_AndroidXXamarinAndroidVersion). Please upgrade your Xamarin installation to a newer version.</_AndroidXXamarinAndroidVersionMessage>
        </PropertyGroup>

        <Warning Text="$(_AndroidXXamarinAndroidVersionMessage)"
                 Condition="'$(AndroidXXamarinAndroidValidationUseWarnings)' == 'true' and '$(_AndroidXXamarinAndroidVersionIsValid)' != 'true'" />

        <Error Text="$(_AndroidXXamarinAndroidVersionMessage)"
               Condition="'$(AndroidXXamarinAndroidValidationUseWarnings)' != 'true' and '$(_AndroidXXamarinAndroidVersionIsValid)' != 'true'" />

    </Target>

    <!--
    ***************************************************************************
    * VALIDATE INSTALLED PACKAGES
    * This target will make sure that all the correct Android X pacakges are
    * installed into the project.
    ***************************************************************************
    -->
    <Target Name="_AndroidXValidateInstalledPackages"
            AfterTargets="ResolveAssemblyReferences"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true' and '$(AndroidXSkipValidateInstalledPackages)' != 'true'">

        <ValidateAndroidXPackages ResolvedAssemblies="@(ReferencePath)"
                                  UseWarningsInsteadOfErrors="$(AndroidXPackageValidationUseWarnings)"
                                  Verbose="$(_AndroidXUseVerboseToolOutput)">
            <Output TaskParameter="ContainsSupportAssemblies" PropertyName="_AndroidXContainsSupportAssemblies" />
        </ValidateAndroidXPackages>

        <PropertyGroup>
            <_AndroidXShouldRunMigration Condition="'$(_AndroidXContainsSupportAssemblies)' == 'false'">false</_AndroidXShouldRunMigration>
        </PropertyGroup>

    </Target>

    <!--
    ***************************************************************************
    * CECILFY
    * This is a set of targets that will migrate all the managed/.NET
    * assemblies (the .dll files).
    ***************************************************************************
    -->
    <Target Name="_AndroidXCecilfyShrinkFindFiles"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true' and '$(AndroidLinkMode)' != 'none'">
        <ItemGroup>
            <_AndroidXFileToCecilfy Include="@(ResolvedUserAssemblies->'$(MonoAndroidLinkerInputDir)%(Filename)%(Extension)')"
                                    Condition="'%(ResolvedUserAssemblies.AndroidXSkipAndroidXMigration)' != 'true'" />
        </ItemGroup>
    </Target>

    <Target Name="_AndroidXCecilfyNoShrinkFindFiles"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true' and '$(AndroidLinkMode)' == 'none'">
        <ItemGroup>
            <_AndroidXFileToCecilfy Include="@(ResolvedUserAssemblies->'$(MonoAndroidIntermediateAssetsDir)%(Filename)%(Extension)')" 
                                    Condition="('%(ResolvedUserAssemblies.TargetFrameworkIdentifier)' == 'MonoAndroid' or '%(ResolvedUserAssemblies.HasMonoAndroidReference)' == 'true') and ('%(ResolvedUserAssemblies.AndroidXSkipAndroidXMigration)' != 'true')" />
        </ItemGroup>
    </Target>

    <Target Name="_AndroidXCecilfyNoShrink"
            DependsOnTargets="_AndroidXCecilfy"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true' and '$(AndroidLinkMode)' == 'none'">
    </Target>

    <Target Name="_AndroidXCecilfyShrink"
            DependsOnTargets="_AndroidXCecilfy"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true' and '$(AndroidLinkMode)' != 'none'">
    </Target>

    <Target Name="_AndroidXCecilfy"
            DependsOnTargets="_AndroidXCecilfyShrinkFindFiles;_AndroidXCecilfyNoShrinkFindFiles"
            Inputs="@(_AndroidXFileToCecilfy);$(_AndroidStampDirectory)_CopyIntermediateAssemblies.stamp"
            Outputs="$(_AndroidStampDirectory)_AndroidXCecilfy.stamp"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'">

        <CecilfyFiles Assemblies="@(_AndroidXFileToCecilfy)"
                      SkipEmbeddedResources="true"
                      Verbose="$(_AndroidXUseVerboseToolOutput)" />

        <Touch Files="$(_AndroidStampDirectory)_CopyIntermediateAssemblies.stamp;$(_AndroidStampDirectory)_AndroidXCecilfy.stamp" AlwaysCreate="True" />

        <ItemGroup>
            <FileWrites Include="$(_AndroidStampDirectory)_AndroidXCecilfy.stamp" />
        </ItemGroup>

    </Target>

    <!--
    ***************************************************************************
    * JETIFY MANIFEST
    * This target will migrate the AndroidManifest.xml files.
    ***************************************************************************
    -->
    <Target Name="_AndroidXJetifyManifest"
            Inputs="$(IntermediateOutputPath)android\AndroidManifest.xml;$(_AndroidStampDirectory)_GenerateJavaStubs.stamp"
            Outputs="$(_AndroidStampDirectory)_AndroidXJetifyManifest.stamp"
            DependsOnTargets="_AndroidXResolveJavaPath"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'">

        <JetifyFiles Files="$(IntermediateOutputPath)android\AndroidManifest.xml"
                     IntermediateFilePath="$(IntermediateOutputPath)androidx\_AndroidXJetifyManifest.jetify"
                     UseIntermediateFile="true"
                     Parallel="$(_AndroidXParallelJetifier)"
                     JavaPath="$(_AndroidXJavaPath)"
                     Verbose="$(_AndroidXUseVerboseToolOutput)" />

        <Touch Files="$(_AndroidStampDirectory)_GenerateJavaStubs.stamp;$(_AndroidStampDirectory)_AndroidXJetifyManifest.stamp" AlwaysCreate="True" />

        <ItemGroup>
            <FileWrites Include="$(_AndroidStampDirectory)_AndroidXJetifyManifest.stamp;$(IntermediateOutputPath)androidx\_AndroidXJetifyManifest.jetify" />
        </ItemGroup>

    </Target>

    <!--
    ***************************************************************************
    * JETIFY EMBEDDED FILES
    * This target will migrate the .xml resource files and the .jar files
    * embedded in either .dll files or .aar files.
    ***************************************************************************
    -->
    <Target Name="_AndroidXFindJetifyEmbeddedFiles"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'">

        <ResolveEmbeddedFiles ResourceDirectories="@(LibraryResourceDirectories)"
                              JavaLibraries="@(ExtractedJarImports)"
                              Resources="@(_AndroidResourceDest)"
                              OutputImportDirectory="$(_AndroidLibrayProjectIntermediatePath)"
                              AssemblyIdentityMapFile="$(_AndroidLibrayProjectAssemblyMapFile)"
                              ContainersToSkip="@(_AndroidXSupportAssemblyToSkip);@(_AndroidXAssemblyToSkip);@(_AndroidXMavenArtifactToSkip)"
                              Verbose="$(_AndroidXUseVerboseToolOutput)">
            <Output TaskParameter="OutputFiles" ItemName="_AndroidXEmbeddedFileToJetify" />
        </ResolveEmbeddedFiles>

    </Target>

    <Target Name="_AndroidXJetifyEmbeddedFiles"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'"
            DependsOnTargets="_AndroidXResolveJavaPath;_AndroidXFindJetifyEmbeddedFiles"
            Inputs="@(_AndroidXEmbeddedFileToJetify->'%(InputItemSpec)');$(_AndroidResFlagFile);$(_AndroidStampDirectory)_ResolveLibraryProjectImports.stamp"
            Outputs="$(_AndroidStampDirectory)_AndroidXJetifyEmbeddedFiles.stamp">

        <JetifyFiles Files="@(_AndroidXEmbeddedFileToJetify)"
                     IntermediateFilePath="$(IntermediateOutputPath)androidx\_AndroidXJetifyEmbeddedFiles.jetify"
                     UseIntermediateFile="true"
                     Parallel="$(_AndroidXParallelJetifier)"
                     JavaPath="$(_AndroidXJavaPath)"
                     Verbose="$(_AndroidXUseVerboseToolOutput)" />
        <Touch Files="$(_AndroidResFlagFile);$(_AndroidStampDirectory)_ResolveLibraryProjectImports.stamp;$(_AndroidStampDirectory)_AndroidXJetifyEmbeddedFiles.stamp" AlwaysCreate="True" />

        <ItemGroup>
            <FileWrites Include="$(_AndroidStampDirectory)_AndroidXJetifyEmbeddedFiles.stamp;$(IntermediateOutputPath)androidx\_AndroidXJetifyEmbeddedFiles.jetify" />
        </ItemGroup>

    </Target>

    <!-- HACK START -->
    <!-- This is to get around the fact that the resources are modfied in the compile step -->
    <Target Name="_AndroidXJetifyEmbeddedFilesFixup"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'"
            AfterTargets="_UpdateAndroidResgen">

        <Touch Files="$(_AndroidStampDirectory)_AndroidXJetifyEmbeddedFiles.stamp" />

    </Target>
    <!-- HACK END -->

    <!--
    ***************************************************************************
    * JETIFY PROGUARD FILES
    * This target will migrate the various proguard files directly added to the
    * project or via any .targets files in NuGets.
    ***************************************************************************
    -->
    <Target Name="_AndroidXFindJetifyProguardFiles"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'">
        <ItemGroup>
            <_AndroidXProguardToJetify Include="@(ProguardConfiguration)"
                                       Condition="'%(ProguardConfiguration.AndroidXSkipAndroidXMigration)' != 'true'" />
        </ItemGroup>
    </Target>

    <Target Name="_AndroidXJetifyProguardRules"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'"
            DependsOnTargets="_AndroidXResolveJavaPath;_AndroidXFindJetifyProguardFiles"
            Inputs="@(_AndroidXProguardToJetify)"
            Outputs="$(_AndroidStampDirectory)_AndroidXJetifyProguardRules.stamp">

        <RemoveDir Directories="$(_AndroidXProguardIntermediateOutputPath)" />
        <JetifyFiles Files="@(_AndroidXProguardToJetify)"
                     JetifiedDirectory="$(_AndroidXProguardIntermediateOutputPath)"
                     IsProGuard="true"
                     IntermediateFilePath="$(IntermediateOutputPath)androidx\_AndroidXJetifyProguardRules.jetify"
                     UseIntermediateFile="true"
                     Parallel="$(_AndroidXParallelJetifier)"
                     JavaPath="$(_AndroidXJavaPath)"
                     Verbose="$(_AndroidXUseVerboseToolOutput)" />
        <Touch Files="$(_AndroidStampDirectory)_AndroidXJetifyProguardRules.stamp" AlwaysCreate="True" />

        <ItemGroup>
            <_AndroidXProguardJetified Include="$(_AndroidXProguardIntermediateOutputPath)*" />
        </ItemGroup>

        <ItemGroup>
            <ProguardConfiguration Remove="@(_AndroidXProguardToJetify)" />
            <ProguardConfiguration Include="@(_AndroidXProguardJetified)" />
            <FileWrites Include="@(_AndroidXProguardJetified);$(_AndroidStampDirectory)_AndroidXJetifyProguardRules.stamp;$(IntermediateOutputPath)androidx\_AndroidXJetifyProguardRules.jetify" />
        </ItemGroup>

    </Target>

    <!--
    ***************************************************************************
    * JETIFY JAVA LIBRARY FILES
    * This target will migrate the various .jar files directly added to the
    * project or via any .targets files in NuGets.
    ***************************************************************************
    -->
    <Target Name="_AndroidXFindJetifyJavaLibraryFiles"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'">
        <ItemGroup>
            <_AndroidXJavaLibraryToJetify Include="@(AndroidJavaLibrary)"
                                          Condition="'%(AndroidJavaLibrary.AndroidXSkipAndroidXMigration)' != 'true'" />
        </ItemGroup>
    </Target>

    <Target Name="_AndroidXJetifyJavaLibraryRules"
            Condition="'$(_AndroidXShouldRunMigration)' == 'true'"
            DependsOnTargets="_AndroidXResolveJavaPath;_AndroidXFindJetifyJavaLibraryFiles"
            Inputs="@(_AndroidXJavaLibraryToJetify)"
            Outputs="$(_AndroidStampDirectory)_AndroidXJetifyJavaLibraryRules.stamp">

        <RemoveDir Directories="$(_AndroidXJavaLibraryIntermediateOutputPath)" />
        <JetifyFiles Files="@(_AndroidXJavaLibraryToJetify)"
                     JetifiedDirectory="$(_AndroidXJavaLibraryIntermediateOutputPath)"
                     IntermediateFilePath="$(IntermediateOutputPath)androidx\_AndroidXJetifyJavaLibraryRules.jetify"
                     UseIntermediateFile="true"
                     Parallel="$(_AndroidXParallelJetifier)"
                     JavaPath="$(_AndroidXJavaPath)"
                     Verbose="$(_AndroidXUseVerboseToolOutput)" />
        <Touch Files="$(_AndroidStampDirectory)_AndroidXJetifyJavaLibraryRules.stamp;$(IntermediateOutputPath)androidx\_AndroidXJetifyJavaLibraryRules.jetify" AlwaysCreate="True" />

        <ItemGroup>
            <_AndroidXJavaLibraryJetified Include="$(_AndroidXJavaLibraryIntermediateOutputPath)*" />
        </ItemGroup>

        <ItemGroup>
            <AndroidJavaLibrary Remove="@(_AndroidXJavaLibraryToJetify)" />
            <AndroidJavaLibrary Include="@(_AndroidXJavaLibraryJetified)" />
            <FileWrites Include="@(_AndroidXJavaLibraryJetified);$(_AndroidStampDirectory)_AndroidXJetifyJavaLibraryRules.stamp" />
        </ItemGroup>

    </Target>

</Project>
