
trigger:
  - master
  - AndroidX
  - refs/tags/*

variables:
  VERBOSITY: normal
  MONO_VERSION: 5_18_1
  XCODE_VERSION: 10.2.1
  CAKE_VERSION: 0.34.1
  DOTNET_CORE_VERSION: 2.2.x
  BUILD_NUMBER: $[counter('$(Build.SourceBranchName)_counter', 1)]
  BUILD_BASE_VERSION: 1.0.0
  # BUILD_PREVIEW_LABEL: [preview]
  # BUILD_PRERELEASE_OVERRIDE: []
  # BUILD_PRODUCE_PRERELEASE: [true]

resources:
  repositories:
    - repository: xamarin-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin

jobs:

  # run the build
  - job: build
    strategy:
      matrix:
        macos:
          imageName: 'Hosted Mac Internal Mojave'
        windows:
          imageName: 'Hosted Windows 2019 with VS2019'
    displayName: 'Build'
    pool:
      name: $(imageName)
    steps:
      # we have submodules
      - checkout: self
        submodules: recursive
      # install xamarin
      - bash: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(MONO_VERSION)
        displayName: 'Switch to the latest Xamarin SDK'
        condition: eq(variables['System.JobName'], 'macos')
      - bash: echo '##vso[task.setvariable variable=MD_APPLE_SDK_ROOT;]'/Applications/Xcode_$(XCODE_VERSION).app;sudo xcode-select --switch /Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer
        displayName: 'Switch to the latest Xcode'
        condition: eq(variables['System.JobName'], 'macos')
      # install dotnet and tools
      - bash: echo '##vso[task.setvariable variable=PATH;]'$PATH:$HOME/.dotnet/tools
        displayName: 'Add ~/.dotnet/tools to the PATH environment variable'
        condition: eq(variables['System.JobName'], 'macos')
      - task: UseDotNet@2
        displayName: 'Use the correct version of the .NET Core SDK'
        inputs:
          version: $(DOTNET_CORE_VERSION)
      - powershell: |
          dotnet tool install -g cake.tool --version $(CAKE_VERSION)
        displayName: 'Install dotnet tools'
      # run the main build
      - powershell: dotnet cake --verbosity=$(VERBOSITY)
        displayName: 'Run build'
      # publish the nugets
      - task: PublishBuildArtifacts@1
        condition: eq(variables['System.JobName'], 'windows')
        displayName: 'Publish artifacts'
        inputs:
          PathToPublish: output/nugets
          ArtifactName: nuget
      # publish the tests
      - task: PublishTestResults@2
        displayName: Publish test results
        condition: always()
        inputs:
          testResultsFormat: xUnit
          testResultsFiles: output/test-results/*/TestResults.xml
          testRunTitle: 'tests-$(System.JobName)'
      # publish the output with the os name
      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifacts'
        condition: always()
        inputs:
          PathToPublish: output
          ArtifactName: 'output-$(System.JobName)'

  # only sign the packages when running on Windows, and using the private server which has the certificates
  - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
    - job: signing
      displayName: Signing NuGets
      variables:
        skipComponentGovernanceDetection: true
      dependsOn: build
      pool:
        name: VSEng-XamarinCustom
        demands:
          - corpnet
      condition: and(succeeded(), or(eq(variables['CodeSign'], 'true'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/AndroidX')))
      steps:
        # don't checkout code and sign the packages
        - checkout: none
        - template: sign-artifacts.yml@xamarin-templates
          parameters:
            targetFolder: '$(Build.ArtifactStagingDirectory)/signed'
        # publish the signed packages
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Signed NuGets'
          inputs:
            artifactName: nuget-signed
            pathToPublish: '$(Build.ArtifactStagingDirectory)/signed'
